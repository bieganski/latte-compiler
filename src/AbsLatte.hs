{-# LANGUAGE TemplateHaskell #-}

module AbsLatte where

-- Haskell module generated by the BNF converter

import Control.Lens


newtype Ident = Ident { _idid :: String } deriving (Eq, Ord, Show, Read)

data Program = Program { _defs :: [TopDef] }
  deriving (Eq, Ord, Show, Read)

data TopDef = FnDef {_ft :: Type, _tid :: Ident, _as :: [Arg], _bl :: Block }
  | ClassDef {_tid :: Ident, _cb :: ClassBlock}
  deriving (Eq, Ord, Show, Read)

data Arg = Arg {_t :: Type, _aid :: Ident}
  deriving (Eq, Ord, Show, Read)

data Block = Block { _ss :: [Stmt] }
  deriving (Eq, Ord, Show, Read)

data ClassBlock = ClassBlock { _cdecls :: [ClassDecl] } 
  deriving (Eq, Ord, Show, Read)

data ClassDecl = FieldDecl { _ct :: Type, _cdid :: Ident }
  deriving (Eq, Ord, Show, Read)


data Stmt
    = Empty
    | BStmt Block
    | Decl { _st :: Type,  _items :: [Item] }
    | Ass {lvalue :: Expr, _se :: Expr}
    | Incr {_sid :: Ident}
    | Decr {_sid :: Ident}
    | Ret {_se :: Expr}
    | VRet
    | Cond {_se :: Expr, _cs :: Stmt}
    | CondElse {_se :: Expr, _ss1 :: Stmt, _ss2 :: Stmt}
    | While {_se :: Expr, _ws :: Stmt}
    | SExp {_se :: Expr}
  deriving (Eq, Ord, Show, Read)

data Item = NoInit {_iid :: Ident} | Init { _iid :: Ident, e :: Expr}
  deriving (Eq, Ord, Show, Read)

data Type = ClassType Ident | Int | Str | Bool | Void | Fun Type [Type]
  deriving (Eq, Ord, Show, Read)

data Expr
    = EField Expr Ident
    | ENew Type
    | ENull Ident
    | EVar Ident
    | ELitInt Integer
    | ELitTrue
    | ELitFalse
    | EApp {_eid :: Ident, _ees :: [Expr]}
    | EString String
    | Neg Expr
    | Not Expr
    | EMul {_ee1 :: Expr, _emop :: MulOp, _ee2 :: Expr}
    | EAdd {_ee1 :: Expr, _eaop :: AddOp, _ee2 :: Expr}
    | ERel {_ee1 :: Expr, _erop :: RelOp, _ee2 :: Expr}
    | EAnd {_ee1 :: Expr, _ee2 :: Expr}
    | EOr  {_ee1 :: Expr, _ee2 :: Expr}
  deriving (Eq, Ord, Show, Read)

data AddOp = Plus | Minus
  deriving (Eq, Ord, Show, Read)

data MulOp = Times | Div | Mod
  deriving (Eq, Ord, Show, Read)

data RelOp = LTH | LE | GTH | GE | EQU | NE
  deriving (Eq, Ord, Show, Read)


makeLenses ''TopDef
makeLenses ''Item
makeLenses ''Stmt
makeLenses ''Expr
makeLenses ''Arg
makeLenses ''Block
makeLenses ''Program

makeLenses ''ClassDecl
makeLenses ''ClassBlock
makeLenses ''Ident

makePrisms ''TopDef
